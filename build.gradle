apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'build-dashboard'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = 1.7
version = '0.1b'

repositories {
    mavenCentral()
}

configurations {
    exportLibs {
        extendsFrom compile
    }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
    }
}

dependencies {
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.+'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.+'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.+'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.+'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
    compile group: 'com.google.guava', name: 'guava', version: '16.+'
    compile group: 'javax', name:'javaee-api', version: '7.+'
    compile group: 'commons-lang', name:'commons-lang', version: '2.+'
    compile group: 'org.hibernate', name: 'hibernate-validator-annotation-processor', version: '4.+'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '4.+'
    compile group: 'javax.validation', name: 'validation-api', version: '1.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.+'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.+'

}

task jarWithDependencies(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Coredata Java API',
                'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

pmd {
    ignoreFailures = true
    ruleSetFiles = files("${rootDir}/config/pmd/pmd-rules.xml")
}

checkstyle {
    ignoreFailures = true
    configFile = new File(rootDir, "config/checkstyle/jis_checks.xml")
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoHtml"
    }
    //classDumpFile = file("$buildDir/jacoco/classpathdumps")
}